package main;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;

public class Graph {
	
	private int n;
	
	private int [] [] matrixOfFollowers;
	
	private Edge [] result;
	
	private int pointer;
	
	public Graph(int n) {
		super();
		this.n = n;
		this.nodes = new HashSet<Node>();
		this.edges = new HashSet<Edge>();
		this.matrixOfFollowers = new int [n][n];
		this.result = new Edge [n-1];
		this.pointer = 0;
	}

	Set<Node> nodes;
	
	Set<Edge> edges;
	
	public void generateGraph()
	{
		Node src = new Node(0);
		Node first = src;
		this.nodes.add(src);
		for(int i=1; i < n; i++)
		{
			Node dest = new Node(i);
			this.nodes.add(dest);
			Edge edge = new Edge(src, dest);
			this.edges.add(edge);
			src = dest;
		}
		Edge edge = new Edge(src, first);
		this.edges.add(edge);
		final int maxNumberOfNodes = this.n*(this.n+1);
		Random generator = new Random();
		int countOfExtraEdges = generator.nextInt((int)(0.6*maxNumberOfNodes));
		countOfExtraEdges += (int)0.3*maxNumberOfNodes;
		Random nodeChooser = new Random();
		Node [] arrayOfNodes =  new Node[this.nodes.size()];
		nodes.toArray(arrayOfNodes);
		int choosedNode;
		for(int i=1; i < countOfExtraEdges; i++)
		{
			choosedNode = nodeChooser.nextInt(this.nodes.size()-1);
			Node firstNode = arrayOfNodes[choosedNode];
			choosedNode = nodeChooser.nextInt(this.nodes.size()-1);
			Node secondNode = arrayOfNodes[choosedNode];
			Edge e = new Edge(firstNode, secondNode);
			this.edges.add(e);
		}
		choosedNode = nodeChooser.nextInt(this.nodes.size()-1);
		Node selectedNode = arrayOfNodes[choosedNode];
		Set<Edge> edgesToRemove = new HashSet<Edge>();
		for(Edge e:this.edges)
		{
			if(e.getDest().equals(selectedNode))
				edgesToRemove.add(e);
		}
		this.edges.removeAll(edgesToRemove);
		int k = 0;
		for (Edge e : this.edges) {
			matrixOfFollowers[e.getSrc().getValue()][e.getDest().getValue()] = 1;
			System.out.println(k+". Edge: src: " + ((e.getSrc()!=null)?e.getSrc().getValue():"") + ", dest: "
					+ ((e.getDest()!=null)?e.getDest().getValue():""));
			k++;
		}
		for(int i=0; i < n; i++)
		{
			for(int j=0; j < n; j++)
			{
				System.out.print(matrixOfFollowers[i][j]+" ");
			}
			System.out.println();
		}
	}
	
	public void solveHamiltonianPathRecursively()
	{
		for(int i=0; i< n; i++)
		{
			for(int j=0; j< n; j++)
			{
				if(matrixOfFollowers[j][i]==1 && pointer > 0 && result[pointer-1].getDest().equals(new Node(i)))
				{
					result[pointer]=new Edge(new Node(i), new Node(j));
					++pointer;
					if(pointer == n - 1)
						return;
					solveHamiltonianPathRecursively();
				}
			}
		}
	}
	public Edge [] getResult()
	{
		return result;
	}
	
}
