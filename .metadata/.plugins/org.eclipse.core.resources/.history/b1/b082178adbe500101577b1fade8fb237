package game;

import java.util.List;
import java.util.Set;

import game.Cell;

import edu.mit.csail.sdg.annotations.Ensures;
import edu.mit.csail.sdg.annotations.Modifies;
import edu.mit.csail.sdg.squander.Squander;
import edu.mit.csail.sdg.squander.annotations.FreshObjects;

public class SoliterSolver {

	
	
	
	public SoliterSolver(Set<State> states) {
		super();
		this.states = states;
	}


	Set<State> states;
	
	State startState;
	
	
	@Ensures({"return[int] in this.states.elts",
		"return[0] = startState",
		"return.length = #this.states",
		 "all i: int | i > 0 && i < return.length | (exists src, via, dest : return[i-1].cells.elts | return[i-1].cells[src].occupied=1 " +
		 "&& return[i-1].cells[via].occupied=1 && return[i-1].cells[dst].occupied=0 " +
		 "&& ((return[i-1].leftNeighbors[src] = via && return[i-1].leftNeighbors[via] = dest)" +
		 "|| (return[i-1].rightNeighbors[src] = via && return[i-1].rightNeighbors[via] = dest)" +
		 "|| (return[i-1].leftTopNeighbors[src] = via && return[i-1].leftTopNeighbors[via] = dest)" +
		 "|| (return[i-1].leftBottomNeighbors[src] = via && return[i-1].leftBottomNeighbors[via] = dest)" +
		 "|| (return[i-1].rightTopNeighbors[src] = via && return[i-1].rightTopNeighbors[via] = dest)" +
		 "|| (return[i-1].rightBottomNeighbors[src] = via && return[i-1].rightBottomNeighbors[via] = dest))=>" +
			      "all cell1 : return[i-1].cells.elts| (all cell2 : return[i].cells.elts| cell1 != src && cell1 != via && cell1 != dest)?(cell2.occupied=cell1.occupied):" +
			      "((cell2=src || cell2=via)?(cell2.occupied=0):(cell2.occupied=1)) )"})
	@Modifies({"Cell.occupied"})
	@FreshObjects(cls = State[].class, num = 1)
	public State [] solveSolitergame()
	{
		return Squander.exe(this);
	}

	
	
	
}
