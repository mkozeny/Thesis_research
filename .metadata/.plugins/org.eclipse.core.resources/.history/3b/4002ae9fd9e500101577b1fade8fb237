package game;

import java.util.List;
import java.util.Set;

import game.Cell;

import edu.mit.csail.sdg.annotations.Ensures;
import edu.mit.csail.sdg.annotations.Modifies;
import edu.mit.csail.sdg.squander.Squander;
import edu.mit.csail.sdg.squander.annotations.FreshObjects;

public class SoliterSolver {

	
	
	
	public SoliterSolver(Set<State> states) {
		super();
		this.states = states;
	}


	Set<State> states;
	
	State startState;
	
	
	@Ensures({"return[int] in this.states.elts",
		"return[0] = startState",
		 "all i: int | i > 0 && i < return.length | exists src, via, dst : return[i-1].cells.elts | return[i-1].cells[src].occupied=1 " +
		 "&& return[i-1].cells[via].occupied=1 && return[i-1].cells[dst].occupied=0 && =>" +
			      "move from return[i-1] to return[i] is ok"})
	@Modifies({"Cell.occupied","return.length", "return.elems"})
	@FreshObjects(cls = State[].class, num = 1)
	public State [] solveSolitergame()
	{
		return Squander.exe(this);
	}

	
	
	
}
