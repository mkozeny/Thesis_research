package game;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;


public class State {

	private List<Cell> cells;
	
	private int n;
	
	//TODO udelat hash mapou
	private Map<Cell, Cell> leftNeighbors;
	
	private Map<Cell, Cell> leftTopNeighbors;
	
	private Map<Cell, Cell> leftBottomNeighbors;
	
	private Map<Cell, Cell> rightNeighbors;
	
	private Map<Cell, Cell> rightTopNeighbors;
	
	private Map<Cell, Cell> rightBottomNeighbors;

	public State(List<Cell> cells, int n) {
		super();
		this.cells = cells;
		this.n = n;
		this.leftNeighbors = new HashMap<Cell, Cell>();
		this.leftTopNeighbors = new HashMap<Cell, Cell>();
		this.leftBottomNeighbors = new HashMap<Cell, Cell>();
		this.rightNeighbors = new HashMap<Cell, Cell>();
		this.rightTopNeighbors = new HashMap<Cell, Cell>();
		this.rightBottomNeighbors = new HashMap<Cell, Cell>();
	}
	
	public State(int n) {
		super();
		this.cells = new ArrayList<Cell>();
		this.n = n;
		this.leftNeighbors = new HashMap<Cell, Cell>();
		this.leftTopNeighbors = new HashMap<Cell, Cell>();
		this.leftBottomNeighbors = new HashMap<Cell, Cell>();
		this.rightNeighbors = new HashMap<Cell, Cell>();
		this.rightTopNeighbors = new HashMap<Cell, Cell>();
		this.rightBottomNeighbors = new HashMap<Cell, Cell>();
	}
	
	public void initState()
	{
		int cols = 0;
		Random random = new Random();
		int freeRow = random.nextInt(this.n);
		int freeColumn = random.nextInt(freeRow);
		for(int i = 0; i< this.n; i++)
		{
			for(int j = 0; j< cols; j++)
			{
				if(i==freeRow && j==freeColumn)
					this.cells.add(new Cell(i,j,0));
				else
					this.cells.add(new Cell(i,j,1));
			}
			cols++;
		}
		int cellsSize = this.cells.size();
		for(int i = 0; i< cellsSize; i++)
		{
			Cell actualCell = this.cells.get(i);
			for(int j = 0; j< cellsSize; j++)
			{
				if(this.cells.get(j).getRow() == actualCell.getRow() && this.cells.get(j).getColumn() == actualCell.getColumn() -1)
					leftNeighbors.put(actualCell, this.cells.get(j));
				else if(this.cells.get(j).getRow() == actualCell.getRow() && this.cells.get(j).getColumn() == actualCell.getColumn() +1)
					rightNeighbors.put(actualCell, this.cells.get(j));
				else if(this.cells.get(j).getRow() == actualCell.getRow() -1 && this.cells.get(j).getColumn() == actualCell.getColumn() -1)
					leftTopNeighbors.put(actualCell, this.cells.get(j));
				else if(this.cells.get(j).getRow() == actualCell.getRow() -1 && this.cells.get(j).getColumn() == actualCell.getColumn())
					rightTopNeighbors.put(actualCell, this.cells.get(j));
				else if(this.cells.get(j).getRow() == actualCell.getRow() +1 && this.cells.get(j).getColumn() == actualCell.getColumn())
					leftBottomNeighbors.put(actualCell, this.cells.get(j));
				else if(this.cells.get(j).getRow() == actualCell.getRow() +1 && this.cells.get(j).getColumn() == actualCell.getColumn() +1)
					rightBottomNeighbors.put(actualCell, this.cells.get(j));
			}
		}
	}

	public List<Cell> getCells() {
		return cells;
	}

	public void setCells(List<Cell> cells) {
		this.cells = cells;
	}

	public int getN() {
		return n;
	}

	public void setN(int n) {
		this.n = n;
	}
	
	
}
