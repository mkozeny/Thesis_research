package graph;

import java.util.Arrays;
import java.util.Stack;

import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;

public class GraphExtension extends Graph{

	private int a;
	
	private Stack<State> stateStack;
	
	private State bestConfiguration;
	
	public GraphExtension(int n, int a) {
		super(n);
		this.a = a;
		State initState = new State(n, a);
		initState.init();
		this.stateStack = new Stack<State>();
		this.stateStack.push(initState);
		this.bestConfiguration = new State(n, a);
		this.bestConfiguration.setConfiguration(new boolean[n]);
		this.bestConfiguration.setCountOfCommonEdges(0);
	}
	
	public void solveZobecnenaBisekcniSirkaGrafuProblem()
	{
		
		while(!this.stateStack.empty())
		{
			State actualState = stateStack.pop();
			actualState.setCountOfCommonEdges(countOfCommonEdges(actualState));
			if(this.bestConfiguration.getCountOfCommonEdges()<=actualState.getCountOfCommonEdges())
				this.bestConfiguration = actualState;
			generateFollowers(actualState);
		}
	}

	public int countOfCommonEdges(State actualState)
	{
		int countOfCommonEdges = 0;
		boolean [] configuration = actualState.getConfiguration();
		for(int i=0; i< configuration.length; i++)
		{
			if(configuration[i])
			{
				for(int j= 0; j < this.matrixOfIncidency[i].length; j++)
				{
					if(this.matrixOfIncidency[i][j] && !configuration[j])
						countOfCommonEdges++;
				}
			}
		}
		return countOfCommonEdges;
	}
	
	private void generateFollowers(State actualState)
	{
		boolean [] configuration = actualState.getConfiguration();
		boolean [] newConfiguration = Arrays.copyOf(configuration, configuration.length);
		for(int i=getMaxOccupiedPosition(configuration)+1; i<configuration.length;i++)
		{
			newConfiguration = Arrays.copyOf(configuration, configuration.length);
			newConfiguration[i]=true;
			State newState = new State(this.n, this.a);
			newState.setConfiguration(newConfiguration);
			newState.setCountOfCommonEdges(countOfCommonEdges(newState));
		}
	}
	
	private int getMaxOccupiedPosition(boolean [] configuration)
	{
		int max = 0;
		for(int i=0; i<configuration.length; i++)
		{
			if(configuration[i])
				max = i;
		}
		return max;
	}

	public State getBestConfiguration() {
		return bestConfiguration;
	}
	
	
}
