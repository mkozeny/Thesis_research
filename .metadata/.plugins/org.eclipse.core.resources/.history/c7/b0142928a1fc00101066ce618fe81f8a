@Ensures({ "return[int] in {0,1}",
//"return[int] ==1 || return[int] == 0",
//"all i: int | i>=0 && i<this.n => return[i]=0 || return[i]=1",
//"all i: int | i>=0 && i<this.n => return[i]=0 || return[i]=1",
"return.length = this.n ",
"(sum i: int | this.v[i]*return[i]) <= this.capacity",
"(sum i: int | this.c[i]*return[i]) > minCost"
//"(sum i: int | this.c[i]*return[i]) > this.minCost",

})
@Modifies ({ "return.length" , "return.elems" })
@FreshObjects ( cls = Integer[].class , num = 1 )
@Options(//ensureAllInts = true,
bitwidth = 9)
public Integer [] solveKnapSackProblem(int minCost)
{
return Squander.exe(this, minCost);
}