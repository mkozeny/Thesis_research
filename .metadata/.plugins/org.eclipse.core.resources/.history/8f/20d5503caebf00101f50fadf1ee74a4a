package main;

public class NQueensProblemSolver {

	private int n;
	
	private Cell []  cells;
	
	private int pointer;
	
	public NQueensProblemSolver(int n) {
		super();
		this.n = n;
		this.cells = new Cell[n];
		this.pointer = 0;
	}

	public void solveNQueensProblemRecursively(int i, int j)
	{
		if(pointer<n)
		{
			if(pointer == 5)
				System.out.println("OMG");
			for(j=0;j<n;j++)
				{
					if(!(isSomeQueenInSameRow(j) || isSomeQueenOnDiagonal(pointer, j)))
					{
						cells[pointer] = new Cell(pointer, j);
						solveNQueensProblemRecursively(++pointer, 0);
						if(pointer<n-1)
							cells[--pointer]=null;
					}
			}
			
		}
	}
	private boolean isSomeQueenInSameRow(int row)
	{
		for(int k=0;k <pointer; k++)
		{
			if(cells[k].getJ() == row)
				return true;
		}
		return false;
	}
	
	private boolean isSomeQueenOnDiagonal(int row, int column)
	{
		for(int k = 0;k<pointer;k++)
			{
				if(cells[k].getI() - cells[k].getJ() == row - column
						|| cells[k].getI() + cells[k].getJ() == row + column)
					return true;
		}
		return false;
	}
	
	public Cell[] getCells()
	{
		return this.cells;
	}
}
