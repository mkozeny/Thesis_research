package game;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import game.Cell;

import edu.mit.csail.sdg.annotations.Ensures;
import edu.mit.csail.sdg.annotations.Modifies;
import edu.mit.csail.sdg.squander.Squander;
import edu.mit.csail.sdg.squander.annotations.FreshObjects;

public class SoliterSolver {

	private int n;
	
	
	public SoliterSolver(State startState, int n) {
		super();
		this.startState = startState;
		this.n = n;
		this.states = new HashSet<State>();
	}


	Set<State> states;
	
	State startState;
	
	
	@Ensures({"return[int] in this.states.elts",
		"return[0] = this.startState",
		"return.length = #this.states",
		 "all i: int | i > 0 && i < return.length => " +
		 "(exists src, via, dest : return[i-1].cells.elts | src.occupied=1 " +
		 "&& via.occupied=1 && dest.occupied=0 " +
		 "&& ((startState.leftNeighbors[src] = via && startState.leftNeighbors[via] = dest)" +
		 "|| (startState.rightNeighbors[src] = via && startState.rightNeighbors[via] = dest)" +
		 "|| (startState.leftTopNeighbors[src] = via && startState.leftTopNeighbors[via] = dest)" +
		 "|| (startState.leftBottomNeighbors[src] = via && startState.leftBottomNeighbors[via] = dest)" +
		 "|| (startState.rightTopNeighbors[src] = via && startState.rightTopNeighbors[via] = dest)" +
		 "|| (startState.rightBottomNeighbors[src] = via && startState.rightBottomNeighbors[via] = dest))=>" +
			      "all cell1 : return[i-1].cells.elts| " +
			      "(all cell2 : return[i].cells.elts| cell1 != src && cell1 != via && cell1 != dest)?(cell2.occupied=cell1.occupied):" +
			      "((cell2=src || cell2=via)?(cell2.occupied=0):(cell2.occupied=1)) )"})
	//@Modifies({"Cell.occupied"})
	@Modifies({"return.elems","return.length"})
	@FreshObjects(cls = State[].class, num = 1)
	public State [] solveSolitergame()
	{
		return Squander.exe(this);
	}

	
	public void generateStates()
	{
		int statesCount = 0;
		int lastRow = 0;
		for(int i =0; i < this.n; i++)
		{
			lastRow +=1;
			statesCount += lastRow;
		}
		this.states.add(startState);
		for(int i =0; i < statesCount-2; i++)
		{
			State s = new State(this.n);
			int cols = 0;
			for(int j = 0; j< this.n; j++)
			{
				for(int k = 0; k< cols; k++)
				{
					s.getCells().add(new Cell(i,j,0));
				}
				cols++;
			}
			//s.setLeftNeighbors(this.startState.getLeftBottomNeighbors());
			this.states.add(s);
		}
		System.out.println("---COUNT OF STATES: "+this.states.size()+"---");
	}
	
}
